export const phong = "\r\nprecision mediump float;\r\n\r\nvarying vec3 normalInterp; \r\nvarying vec3 vertPos; \r\n\r\nuniform int mode; \r\nuniform float Ka; \r\nuniform float Kd; \r\nuniform float Ks; \r\nuniform float shininessVal; \r\n\r\n\r\nuniform vec3 ambientColor;\r\nuniform vec3 diffuseColor;\r\nuniform vec3 specularColor;\r\n\r\nuniform vec3 lightPos; \r\n\r\nvoid main() {\r\n vec3 N = normalize(normalInterp);\r\n vec3 L = normalize(lightPos - vertPos);\r\n\r\n \r\n float lambertian = max(dot(N, L), 0.0);\r\n\r\n float specular = 0.0;\r\n\r\n if(lambertian > 0.0) {\r\n vec3 R = reflect(-L, N); \r\n vec3 V = normalize(-vertPos); \r\n\r\n \r\n float specAngle = max(dot(R, V), 0.0);\r\n specular = pow(specAngle, shininessVal);\r\n }\r\n gl_FragColor = vec4(Ka * ambientColor +\r\n Kd * lambertian * diffuseColor +\r\n Ks * specular * specularColor, 1.0);\r\n\r\n \r\n if(mode == 2) gl_FragColor = vec4(Ka * ambientColor, 1.0);\r\n \r\n if(mode == 3) gl_FragColor = vec4(Kd * lambertian * diffuseColor, 1.0);\r\n \r\n if(mode == 4) gl_FragColor = vec4(Ks * specular * specularColor, 1.0);\r\n}\r\n"